// Generated by gencpp from file vision/pub_goalomni.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_PUB_GOALOMNI_H
#define VISION_MESSAGE_PUB_GOALOMNI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct pub_goalomni_
{
  typedef pub_goalomni_<ContainerAllocator> Type;

  pub_goalomni_()
    : visionGawangPosX(0)
    , visionGawangPosY(0)
    , visionGawangPosT(0)  {
    }
  pub_goalomni_(const ContainerAllocator& _alloc)
    : visionGawangPosX(0)
    , visionGawangPosY(0)
    , visionGawangPosT(0)  {
  (void)_alloc;
    }



   typedef int16_t _visionGawangPosX_type;
  _visionGawangPosX_type visionGawangPosX;

   typedef int16_t _visionGawangPosY_type;
  _visionGawangPosY_type visionGawangPosY;

   typedef int16_t _visionGawangPosT_type;
  _visionGawangPosT_type visionGawangPosT;





  typedef boost::shared_ptr< ::vision::pub_goalomni_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::pub_goalomni_<ContainerAllocator> const> ConstPtr;

}; // struct pub_goalomni_

typedef ::vision::pub_goalomni_<std::allocator<void> > pub_goalomni;

typedef boost::shared_ptr< ::vision::pub_goalomni > pub_goalomniPtr;
typedef boost::shared_ptr< ::vision::pub_goalomni const> pub_goalomniConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::pub_goalomni_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::pub_goalomni_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::pub_goalomni_<ContainerAllocator1> & lhs, const ::vision::pub_goalomni_<ContainerAllocator2> & rhs)
{
  return lhs.visionGawangPosX == rhs.visionGawangPosX &&
    lhs.visionGawangPosY == rhs.visionGawangPosY &&
    lhs.visionGawangPosT == rhs.visionGawangPosT;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::pub_goalomni_<ContainerAllocator1> & lhs, const ::vision::pub_goalomni_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision::pub_goalomni_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::pub_goalomni_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::pub_goalomni_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::pub_goalomni_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::pub_goalomni_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::pub_goalomni_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::pub_goalomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "644b097232c29cc53a954f9c2eb28199";
  }

  static const char* value(const ::vision::pub_goalomni_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x644b097232c29cc5ULL;
  static const uint64_t static_value2 = 0x3a954f9c2eb28199ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::pub_goalomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/pub_goalomni";
  }

  static const char* value(const ::vision::pub_goalomni_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::pub_goalomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 visionGawangPosX \n"
"int16 visionGawangPosY\n"
"int16 visionGawangPosT \n"
"\n"
"\n"
;
  }

  static const char* value(const ::vision::pub_goalomni_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::pub_goalomni_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visionGawangPosX);
      stream.next(m.visionGawangPosY);
      stream.next(m.visionGawangPosT);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pub_goalomni_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::pub_goalomni_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::pub_goalomni_<ContainerAllocator>& v)
  {
    s << indent << "visionGawangPosX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionGawangPosX);
    s << indent << "visionGawangPosY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionGawangPosY);
    s << indent << "visionGawangPosT: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionGawangPosT);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_PUB_GOALOMNI_H
