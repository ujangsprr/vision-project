// Generated by gencpp from file vision/pub_robomni.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_PUB_ROBOMNI_H
#define VISION_MESSAGE_PUB_ROBOMNI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision
{
template <class ContainerAllocator>
struct pub_robomni_
{
  typedef pub_robomni_<ContainerAllocator> Type;

  pub_robomni_()
    : obst1X(0)
    , obst1Y(0)
    , obst1R(0)
    , obst1detect(0)
    , visionRobotPosX(0)
    , visionRobotPosY(0)
    , visionRobotPosT(0)  {
    }
  pub_robomni_(const ContainerAllocator& _alloc)
    : obst1X(0)
    , obst1Y(0)
    , obst1R(0)
    , obst1detect(0)
    , visionRobotPosX(0)
    , visionRobotPosY(0)
    , visionRobotPosT(0)  {
  (void)_alloc;
    }



   typedef int16_t _obst1X_type;
  _obst1X_type obst1X;

   typedef int16_t _obst1Y_type;
  _obst1Y_type obst1Y;

   typedef int16_t _obst1R_type;
  _obst1R_type obst1R;

   typedef int16_t _obst1detect_type;
  _obst1detect_type obst1detect;

   typedef int16_t _visionRobotPosX_type;
  _visionRobotPosX_type visionRobotPosX;

   typedef int16_t _visionRobotPosY_type;
  _visionRobotPosY_type visionRobotPosY;

   typedef int16_t _visionRobotPosT_type;
  _visionRobotPosT_type visionRobotPosT;





  typedef boost::shared_ptr< ::vision::pub_robomni_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::pub_robomni_<ContainerAllocator> const> ConstPtr;

}; // struct pub_robomni_

typedef ::vision::pub_robomni_<std::allocator<void> > pub_robomni;

typedef boost::shared_ptr< ::vision::pub_robomni > pub_robomniPtr;
typedef boost::shared_ptr< ::vision::pub_robomni const> pub_robomniConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::pub_robomni_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::pub_robomni_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision::pub_robomni_<ContainerAllocator1> & lhs, const ::vision::pub_robomni_<ContainerAllocator2> & rhs)
{
  return lhs.obst1X == rhs.obst1X &&
    lhs.obst1Y == rhs.obst1Y &&
    lhs.obst1R == rhs.obst1R &&
    lhs.obst1detect == rhs.obst1detect &&
    lhs.visionRobotPosX == rhs.visionRobotPosX &&
    lhs.visionRobotPosY == rhs.visionRobotPosY &&
    lhs.visionRobotPosT == rhs.visionRobotPosT;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision::pub_robomni_<ContainerAllocator1> & lhs, const ::vision::pub_robomni_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision::pub_robomni_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::pub_robomni_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::pub_robomni_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::pub_robomni_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::pub_robomni_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::pub_robomni_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::pub_robomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b87a415b121fcf00a877a1ae0c010a4d";
  }

  static const char* value(const ::vision::pub_robomni_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb87a415b121fcf00ULL;
  static const uint64_t static_value2 = 0xa877a1ae0c010a4dULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::pub_robomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/pub_robomni";
  }

  static const char* value(const ::vision::pub_robomni_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::pub_robomni_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 obst1X \n"
"int16 obst1Y\n"
"int16 obst1R\n"
"int16 obst1detect \n"
"\n"
"int16 visionRobotPosX\n"
"int16 visionRobotPosY\n"
"int16 visionRobotPosT\n"
;
  }

  static const char* value(const ::vision::pub_robomni_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::pub_robomni_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obst1X);
      stream.next(m.obst1Y);
      stream.next(m.obst1R);
      stream.next(m.obst1detect);
      stream.next(m.visionRobotPosX);
      stream.next(m.visionRobotPosY);
      stream.next(m.visionRobotPosT);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pub_robomni_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::pub_robomni_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::pub_robomni_<ContainerAllocator>& v)
  {
    s << indent << "obst1X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.obst1X);
    s << indent << "obst1Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.obst1Y);
    s << indent << "obst1R: ";
    Printer<int16_t>::stream(s, indent + "  ", v.obst1R);
    s << indent << "obst1detect: ";
    Printer<int16_t>::stream(s, indent + "  ", v.obst1detect);
    s << indent << "visionRobotPosX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionRobotPosX);
    s << indent << "visionRobotPosY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionRobotPosY);
    s << indent << "visionRobotPosT: ";
    Printer<int16_t>::stream(s, indent + "  ", v.visionRobotPosT);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_PUB_ROBOMNI_H
